#Calculate mode
mode_var <- function(variable) {
unique_var <- unique(variable)
unique_var[which.max(tabulate(match(variable, unique_var)))]
}
mode_var(data$Age)
#Calculate mean absolute deviation
X <- data$Age
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Age)
#Calculate IQR
range(data$Age, na.rm=TRUE)
IQR(data$Age)
#Calculate standard deviation
sd(data$Age)
#Fit normal distribution
library(fitdistrplus)
fit <- fitdistr(data$Age, "normal")
class(fit)
para <- fit$estimate
hist(data$Age, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Age)
#Calculate mean absolute deviation
X <- data$Rating
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Rating)
#Calculate IQR
range(data$Rating, na.rm=TRUE)
IQR(data$Rating)
#Calculate standard deviation
sd(data$Rating)
#Fit normal distribution
fit <- fitdistr(data$Rating, "normal")
class(fit)
para <- fit$estimate
hist(data$Rating, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Rating)
cor(data$Age, data$Rating)
#Subsetting data condition wise
dat_exp1 <- subset(data, Condition == "Study1", select = c("Age","Rating"))
dat_exp2 <- subset(data, Condition == "Study2", select = c("Age","Rating"))
#Scatter plot displaying the Age and Ratings variable in study1
plot(dat_exp1$Age, dat_exp1$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study1")
#Scatter plot displaying the Age and Ratings variable in study2
plot(dat_exp2$Age, dat_exp2$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study2")
#Average rating per subject using tapply
avg_rating <- tapply(data$Rating, list(data$Subject), mean)
head(avg_rating)
#Median rating per subject using tapply
median_rating <- tapply(data$Rating, list(data$Subject), median)
head(median_rating)
#Average rating per subject using aggregate
avg_rating_agg <- aggregate(data$Rating, list(data$Subject), mean)
head(avg_rating_agg)
#Median rating per subject using aggregate
median_rating_agg <- aggregate(data$Rating, list(data$Subject), median)
head(median_rating_agg)
#Average and median rating per subject using ddply
library(plyr)
rating_dd <- ddply(data, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
data <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data.txt', header=TRUE)
sum(is.na(data))
View(data)
#Summary of the variables
summary(data)
#Calculate mean and median
summary(data$Age)
#Calculate mode
mode_var <- function(variable) {
unique_var <- unique(variable)
unique_var[which.max(tabulate(match(variable, unique_var)))]
}
mode_var(data$Age)
#Calculate mean absolute deviation
X <- data$Age
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Age)
#Calculate IQR
range(data$Age, na.rm=TRUE)
IQR(data$Age)
#Calculate standard deviation
sd(data$Age)
#Fit normal distribution
library(fitdistrplus)
fit <- fitdistr(data$Age, "normal")
class(fit)
para <- fit$estimate
hist(data$Age, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Age)
#Calculate mean absolute deviation
X <- data$Rating
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Rating)
#Calculate IQR
range(data$Rating, na.rm=TRUE)
IQR(data$Rating)
#Calculate standard deviation
sd(data$Rating)
#Fit normal distribution
fit <- fitdistr(data$Rating, "normal")
class(fit)
para <- fit$estimate
hist(data$Rating, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Rating)
cor(data$Age, data$Rating)
#Subsetting data condition wise
dat_exp1 <- subset(data, Condition == "Study1", select = c("Age","Rating"))
dat_exp2 <- subset(data, Condition == "Study2", select = c("Age","Rating"))
#Scatter plot displaying the Age and Ratings variable in study1
plot(dat_exp1$Age, dat_exp1$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study1")
#Scatter plot displaying the Age and Ratings variable in study2
plot(dat_exp2$Age, dat_exp2$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study2")
#Average rating per subject using tapply
avg_rating <- tapply(data$Rating, list(data$Subject), mean)
head(avg_rating)
#Median rating per subject using tapply
median_rating <- tapply(data$Rating, list(data$Subject), median)
head(median_rating)
#Average rating per subject using aggregate
avg_rating_agg <- aggregate(data$Rating, list(data$Subject), mean)
head(avg_rating_agg)
#Median rating per subject using aggregate
median_rating_agg <- aggregate(data$Rating, list(data$Subject), median)
head(median_rating_agg)
#Average and median rating per subject using ddply
library(plyr)
table(data$Subject)
rating_dd <- ddply(data, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(data, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(dat, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(data, c(data$Subject), summarise,
avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean('data$Rating'), median = median('data$Rating'))
head(rating_dd)
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean('data$Rating'), median = median('data$Rating'))
head(aggre_ddp)
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean('Rating'), median = median('Rating'))
head(aggre_ddp)
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean(Rating), median = median(Rating))
head(aggre_ddp)
data <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data.txt', header=TRUE)
sum(is.na(data))
data <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data.txt', header=TRUE)
View((age_cat))
View(age_cat)
age_cat
age_cat<-cut(data$Age, seq(0,90,10), labels=c(1:10))
age_cat<-cut(data$Age, seq(0,90,10), labels=c(1:11))
age_cat<-cut(data$Age, seq(0,90,10), labels=c(1:9))
age_cat
data1 <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data1.txt', header=TRUE)
View(data1)
data1$Age<-cut(data$Age, seq(0,90,10), labels=c(1:9))
data1$Age<-cut(data$Age, seq(0,90,10), labels=c(0:10))
data1$Age<-cut(data$Age, seq(0,90,10), labels=c(0:9))
data1$Age<-cut(data$Age, seq(0,90,10), right=FALSE, labels=c(0:9))
data1$Age<-cut(data$Age, seq(0,90,10), right=FALSE, labels=c(0:10))
data1$Age<-cut(data$Age, seq(0,90,10), right=FALSE, labels=c(0:10))
data1$Age<-cut(data$Age, seq(10,90,10), right=FALSE, labels=c(1:10))
data1$Age<-cut(data$Age, seq(10,90,10), right=FALSE, labels=c(1:9))
data1$Age<-cut(data$Age, seq(10,90,10), labels=c(1:9))
data1$Age<-cut(data$Age, seq(10,90,10), labels=c(1:8))
dat_exp11 <- subset(data1, Condition == "Study1", select = c("Age","Rating"))
dat_exp22 <- subset(data1, Condition == "Study2", select = c("Age","Rating"))
plot(dat_exp11$Age, dat_exp11$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study1")
plot(dat_exp22$Age, dat_exp22$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study2")
describe(data)
data
head(data)
table(data$Age)
table(head(data$Age))
summary(data$Rating)
mode_var(data$Rating)
rm(list = ls())
library(plyr)
library(magrittr)
library(dplyr)
library(plotfunctions)
library(ggplot2)
#set wd
setwd('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment2')
#load data
dat <- read.table("data.txt", header = TRUE)
head(dat)
#subset data based on condition
study1<- subset(dat, dat$Condition == "Study1")
study2<- subset(dat, dat$Condition == "Study2")
#differentiate between subject IDs for the two conditions
study2$Subject <- gsub('s', 'p', study2$Subject)
#merge subsets
dat2 <- rbind(study1, study2)
#convert ratings to binary familiarity values
dat2$Familiarity <- ifelse(dat2$Rating > 4, 1, 0)
newdat <- ddply(dat2, c("Subject", "Condition", "Age", "Item"),
summarise,
meanFamiliarity = mean(Familiarity),
F1 = length(Familiarity[Familiarity=='1']),
F0 = length(Familiarity[Familiarity=='0']))
#Average familiarity scores per age
avg <- ddply(newdat, c("Age", "Condition"),
summarise,
age_meanFamiliarity = mean(meanFamiliarity))
#subset data based on condition
study1<- subset(dat, dat$Condition == "Study1")
study2<- subset(dat, dat$Condition == "Study2")
#differentiate between subject IDs for the two conditions
study2$Subject <- gsub('s', 'p', study2$Subject)
#merge subsets
dat2 <- rbind(study1, study2)
#convert ratings to binary familiarity values
dat2$Familiarity <- ifelse(dat2$Rating > 4, 1, 0)
newdat <- ddply(dat2, c("Subject", "Condition", "Age", "Item"),
summarise,
meanFamiliarity = mean(Familiarity),
F1 = length(Familiarity[Familiarity=='1']),
F0 = length(Familiarity[Familiarity=='0']))
#subset data based on condition
study1<- subset(dat, dat$Condition == "Study1")
study2<- subset(dat, dat$Condition == "Study2")
#differentiate between subject IDs for the two conditions
study2$Subject <- gsub('s', 'p', study2$Subject)
#merge subsets
dat2 <- rbind(study1, study2)
#convert ratings to binary familiarity values
dat2$Familiarity <- ifelse(dat2$Rating > 4, 1, 0)
newdat <- ddply(dat2, c("Subject", "Condition", "Age", "Item"),
summarise,
meanFamiliarity = mean(Familiarity),
F1 = length(Familiarity[Familiarity=='1']),
F0 = length(Familiarity[Familiarity=='0']))
rm(list=ls())
#clear list
rm(list=ls())
#set working directory
setwd('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment3')
#load libraries
library(plyr)
library(plotfunctions)
library(mgcv)    # for GAMs
library(itsadug) # for visualization of GAMs
#load data
dat <- read.table('data.txt', header= TRUE)
View(dat)
#change rating to familiarity score
dat$Familiarity <- ifelse(dat$Rating > 4, 1, 0)
#center age variable
dat$cAge <- dat$Age - 40
lm1 <- glm(Familiarity ~ cAge , data=dat, family=binomial)
summary(lm1)
g1 <- gam(Familiarity ~ cAge, data=dat, family=binomial)
summary(g1)
summary(lm1)
g2 <- gam(Familiarity ~ s(cAge) , data=dat, family=binomial)
#summary of model g2
summary(g2)
#visualize fitted effects
plot_smooth(g2, view="cAge")
par(mfrow=c(1,2))
# PLOT 1
plot(g2)
# PLOT 2
plot_smooth(g2, view="cAge")
#using Age instead of cAge
g2b <- gam(Familiarity ~ s(Age) , data=dat, family=binomial)
summary(g2b)
summary(g2)
# PLOT 1
plot(g2)
# PLOT 2
plot_smooth(g2, view="cAge")
# PLOT 1
plot(g2b)
# PLOT 2
plot_smooth(g2b, view="Age")
#convert condition to a factor
dat$Cond <- as.factor(ifelse(dat$Condition=='Study1', "Study1", "Study2"))
levels(dat$Cond)
#extended GAM model with condition as a main effect
g3 <- gam(Familiarity ~ Cond + s(Age) , data=dat, family=binomial)
#summary of g3
summary(g3)
par(mfrow=c(1,2))
# PLOT 1
plot(g3)
# PLOT 2
plot_smooth(g3, view="Age", plot_all="Cond")
anova(g2b,g3, test="Chisq")
g4 <- gam(Familiarity ~ Cond + s(Age, by = Cond) , data=dat, family=binomial)
summary(g4)
par(mfrow=c(1,2))
# PLOT 1
plot(g4)
# PLOT 2
plot_smooth(g4, view="Age", plot_all="Cond")
anova(g3,g4, test="Chisq")
dat$logFrequency <- log(dat$Frequency+.1)
# May take somewhat more time to run:
g5 <- gam(Familiarity ~ Cond + te(Age, logFrequency, by=Cond),
data=dat, family=binomial)
par(mfrow=c(1,2), mar=c(5.1,4.1,3.1,4.1))
# PLOT 1
pvisgam(g5, select=1, view=c("Age", "logFrequency"),
dec=1, zlim=c(-7,3),
main="Study 1")
pvisgam(g5, select=2, view=c("Age", "logFrequency"),
dec=1, zlim=c(-7,3),
main="Study 2")
par(mfrow=c(1,2), mar=c(5.1,4.1,3.1,4.1))
range(dat$Age[dat$Condition=='Study2'])
# PLOT 2
fvisgam(g5, view=c("Age", "logFrequency"),
cond=list(Cond="Study1"),
dec=1, zlim=c(-6,4),
main="Study 1")
# PLOT 2
fvisgam(g5, view=c("Age", "logFrequency"),
cond=list(Cond="Study2"),
dec=1, zlim=c(-6,4),
main="Study 2")
g6 <- gam(Familiarity ~ Cond + s(Age) + s(logFrequency) + ti(Age, logFrequency, by=Cond), data=dat, family=binomial)
g6 <- gam(Familiarity ~ Cond + s(Age) + s(logFrequency) + ti(Age, logFrequency, by=Cond), data=dat, family=binomial)
rm(list=ls())
library(plyr)
library(magrittr)
library(dplyr)
library(plotfunctions)
library(ggplot2)
#set wd
setwd('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment2')
setwd('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment2')
#load data
dat <- read.table("data.txt", header = TRUE)
head(dat)
#subset data based on condition
study1<- subset(dat, dat$Condition == "Study1")
study2<- subset(dat, dat$Condition == "Study2")
#differentiate between subject IDs for the two conditions
study2$Subject <- gsub('s', 'p', study2$Subject)
#merge subsets
dat2 <- rbind(study1, study2)
#convert ratings to binary familiarity values
dat2$Familiarity <- ifelse(dat2$Rating > 4, 1, 0)
newdat <- ddply(dat2, c("Subject", "Condition", "Age", "Item"),
summarise,
meanFamiliarity = mean(Familiarity),
F1 = length(Familiarity[Familiarity=='1']),
F0 = length(Familiarity[Familiarity=='0']))
#subset data based on condition
study1<- subset(dat, dat$Condition == "Study1")
study2<- subset(dat, dat$Condition == "Study2")
#differentiate between subject IDs for the two conditions
study2$Subject <- gsub('s', 'p', study2$Subject)
#merge subsets
dat2 <- rbind(study1, study2)
#convert ratings to binary familiarity values
dat2$Familiarity <- ifelse(dat2$Rating > 4, 1, 0)
newdat <- ddply(dat2, c("Subject", "Condition", "Age", "Item"),
summarise,
meanFamiliarity = mean(Familiarity),
F1 = length(Familiarity[Familiarity=='1']),
F0 = length(Familiarity[Familiarity=='0']))
#merge subsets
dat2 <- rbind(study1, study2)
#convert ratings to binary familiarity values
dat2$Familiarity <- ifelse(dat2$Rating > 4, 1, 0)
#Average familiarity scores per age
avg <- ddply(newdat, c("Age", "Condition"),
summarise,
age_meanFamiliarity = mean(meanFamiliarity))
head(avg)
#plot
emptyPlot(xlim=c(10, 90), ylim= c(0,1))
title(main="Average familiarity scores per age", xlab="Age", ylab="Avg familiarity score")
axis(side=1, at=seq(10, 90, by=10))
points(avg$Age, avg$age_meanFamiliarity,
pch=16, col=ifelse(avg$Condition=='Study1', 4, 1))
legend_margin('centerright', legend = c("Study1", "Study2"),
col=c(4, 1), pch = c(16, 16))
#Average familiarity scores per age
avg <- ddply(newdat, c("Age", "Condition"),
summarise,
age_meanFamiliarity = mean(meanFamiliarity))
head(avg)
#plot
emptyPlot(xlim=c(10, 90), ylim= c(0,1))
title(main="Average familiarity scores per age", xlab="Age", ylab="Avg familiarity score")
axis(side=1, at=seq(10, 90, by=10))
points(avg$Age, avg$age_meanFamiliarity,
pch=16, col=ifelse(avg$Condition=='Study1', 4, 1))
legend_margin('centerright', legend = c("Study1", "Study2"),
col=c(4, 1), pch = c(16, 16))
newdat$AgeGroup <- (floor(newdat$Age / 10)+.5)*10
# print age range per age group:
agerange <- function(x){
return(paste(range(x), collapse="-"))
}
tapply(newdat$Age, list(newdat$AgeGroup), agerange)
#average familiarity per age group
avgfam_age_grp <- ddply(newdat, c("AgeGroup", "Condition"),
summarise,
age_grp_meanFamiliarity = mean(meanFamiliarity))
head(avgfam_age_grp)
#average familiarity per condition
avgfam_cond <- ddply(newdat, c("Condition"),
summarise,
condition_meanFamiliarity = mean(meanFamiliarity))
#plot
emptyPlot(xlim = c(10, 90), ylim = c(0,1))
title(main="Average familiarity scores per age group", xlab="Age Group", ylab="Avg Familiarity Score")
axis(side=1, at=seq(10, 90, by=10))
points(avgfam_age_grp$AgeGroup, avgfam_age_grp$age_grp_meanFamiliarity, pch=16,
col=ifelse(avgfam_age_grp$Condition=='Study1', 4, 1))
abline(h=avgfam_cond$condition_meanFamiliarity,     col=ifelse(avgfam_cond$Condition=='Study1', 4, 1))
legend_margin('centerright', legend = c("Study1", "Study2"),
col=c(4, 1), pch = c(16, 16))
#binomial counts pairs for a logistic regression model
newdat$Familiarity <- cbind(newdat$F1, newdat$F0)
# compare `head` and `View` - what do you notice?
head(newdat)
View(newdat)
# access 1 count pair:
newdat$Familiarity[1,]
newdat$Familiarity[1,1]
newdat$Familiarity[1,2]
#center around mean of age
newdat$cAge <- newdat$Age - 40
lm1 <- glm(Familiarity ~ cAge + Condition + cAge:Condition, data=newdat, family=binomial)
cf<-coef(lm1)
cf
#summary of glm1
summary(lm1)
emptyPlot(c(-40, 50), c(-3,3),  v0=c(0,0), xlab = "Centered Age",
ylab="Familiarity Score (Logit scale)", axes=FALSE)
axis(1, at=c(-40, 0, 50), las=1)
#axis(side=1, at=seq(-40, 50, by=10))
axis(2, at=c(-3, 0, 3), las=1)
# regression line:
# Study1 is reference level:
abline(a=cf[1], b=cf['cAge'], col='dodgerblue2', lwd = 1.5)
text(x=max(newdat$cAge), y=cf[1]+cf['cAge']*max(newdat$cAge),
labels = ('Study1'),
col = 'dodgerblue2', pos=4, xpd=TRUE)
#Study2
abline(a=cf[1]+cf['ConditionStudy2'],
b=cf['cAge']+cf["cAge:ConditionStudy2"],
col='black', lwd = 1.5)
text(x=max(newdat$cAge),
y=cf[1]+cf['ConditionStudy2']+
(cf['cAge']+cf["cAge:ConditionStudy2"])*max(newdat$cAge),
labels=('Study2'),
col='black', pos=4, xpd=TRUE)
qqnorm(resid(lm1))
qqline(resid(lm1))
#plot for fitted vs residual values
par(mfrow=c(1,2), cex=1.1)
# 'normal' plot:
emptyPlot(range(fitted(lm1)), range(resid(lm1)),
xlab="Fitted", ylab="Resid",
xmark=TRUE, ymark=TRUE, las=1)
points(fitted(lm1), resid(lm1), pch=16, col=alpha("#FF0000"))
check_normaldist(resid(lm1))
#check for dispersion
dp <- sum(residuals(lm1, type="pearson")^2)/lm1$df.res
dp
lm1b <- glm(Familiarity ~ Age + Condition + Age:Condition, data=dat2, family=binomial)
summary(lm1b)
summary(lm1)
lm0 <- glm(Familiarity ~ cAge + Condition, data=newdat, family=binomial)
summary(lm0)
summary(lm1)
#Using Rule of thumb: RD/(n - p) for lm0
RD_lm0<- 39387/33830
RD_lm0
#Using Rule of thumb: RD/(n - p) for lm1
RD_lm1<- 39322/33829
RD_lm1
anova(lm0, lm1, test="Chisq")
qqnorm(resid(lm1b))
qqline(resid(lm1b))
rm(list=ls())
