data <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data.txt', header=TRUE)
sum(is.na(data))
View(data)
#Summary of the variables
summary(data)
#Calculate mean and median
summary(data$Age)
#Calculate mode
mode_var <- function(variable) {
unique_var <- unique(variable)
unique_var[which.max(tabulate(match(variable, unique_var)))]
}
mode_var(data$Age)
#Calculate mean absolute deviation
X <- data$Age
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Age)
#Calculate IQR
range(data$Age, na.rm=TRUE)
IQR(data$Age)
#Calculate standard deviation
sd(data$Age)
#Fit normal distribution
library(fitdistrplus)
fit <- fitdistr(data$Age, "normal")
class(fit)
para <- fit$estimate
hist(data$Age, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Age)
#Calculate mean absolute deviation
X <- data$Rating
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Rating)
#Calculate IQR
range(data$Rating, na.rm=TRUE)
IQR(data$Rating)
#Calculate standard deviation
sd(data$Rating)
#Fit normal distribution
fit <- fitdistr(data$Rating, "normal")
class(fit)
para <- fit$estimate
hist(data$Rating, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Rating)
cor(data$Age, data$Rating)
#Subsetting data condition wise
dat_exp1 <- subset(data, Condition == "Study1", select = c("Age","Rating"))
dat_exp2 <- subset(data, Condition == "Study2", select = c("Age","Rating"))
#Scatter plot displaying the Age and Ratings variable in study1
plot(dat_exp1$Age, dat_exp1$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study1")
#Scatter plot displaying the Age and Ratings variable in study2
plot(dat_exp2$Age, dat_exp2$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study2")
#Average rating per subject using tapply
avg_rating <- tapply(data$Rating, list(data$Subject), mean)
head(avg_rating)
#Median rating per subject using tapply
median_rating <- tapply(data$Rating, list(data$Subject), median)
head(median_rating)
#Average rating per subject using aggregate
avg_rating_agg <- aggregate(data$Rating, list(data$Subject), mean)
head(avg_rating_agg)
#Median rating per subject using aggregate
median_rating_agg <- aggregate(data$Rating, list(data$Subject), median)
head(median_rating_agg)
#Average and median rating per subject using ddply
library(plyr)
rating_dd <- ddply(data, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
data <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data.txt', header=TRUE)
sum(is.na(data))
View(data)
#Summary of the variables
summary(data)
#Calculate mean and median
summary(data$Age)
#Calculate mode
mode_var <- function(variable) {
unique_var <- unique(variable)
unique_var[which.max(tabulate(match(variable, unique_var)))]
}
mode_var(data$Age)
#Calculate mean absolute deviation
X <- data$Age
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Age)
#Calculate IQR
range(data$Age, na.rm=TRUE)
IQR(data$Age)
#Calculate standard deviation
sd(data$Age)
#Fit normal distribution
library(fitdistrplus)
fit <- fitdistr(data$Age, "normal")
class(fit)
para <- fit$estimate
hist(data$Age, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Age)
#Calculate mean absolute deviation
X <- data$Rating
X.bar <- mean( X )
AD <- abs( X - X.bar )
AAD <- mean( AD )
print( AAD )
#Calculate median absolute deviation
mad(data$Rating)
#Calculate IQR
range(data$Rating, na.rm=TRUE)
IQR(data$Rating)
#Calculate standard deviation
sd(data$Rating)
#Fit normal distribution
fit <- fitdistr(data$Rating, "normal")
class(fit)
para <- fit$estimate
hist(data$Rating, prob = TRUE)
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE)
#Calculate skewness
library(moments)
skewness(data$Rating)
cor(data$Age, data$Rating)
#Subsetting data condition wise
dat_exp1 <- subset(data, Condition == "Study1", select = c("Age","Rating"))
dat_exp2 <- subset(data, Condition == "Study2", select = c("Age","Rating"))
#Scatter plot displaying the Age and Ratings variable in study1
plot(dat_exp1$Age, dat_exp1$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study1")
#Scatter plot displaying the Age and Ratings variable in study2
plot(dat_exp2$Age, dat_exp2$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study2")
#Average rating per subject using tapply
avg_rating <- tapply(data$Rating, list(data$Subject), mean)
head(avg_rating)
#Median rating per subject using tapply
median_rating <- tapply(data$Rating, list(data$Subject), median)
head(median_rating)
#Average rating per subject using aggregate
avg_rating_agg <- aggregate(data$Rating, list(data$Subject), mean)
head(avg_rating_agg)
#Median rating per subject using aggregate
median_rating_agg <- aggregate(data$Rating, list(data$Subject), median)
head(median_rating_agg)
#Average and median rating per subject using ddply
library(plyr)
table(data$Subject)
rating_dd <- ddply(data, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(data, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(dat, c(data$Subject), summarise, avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(data, c(data$Subject), summarise,
avg = mean(data$Rating), median = median(data$Rating))
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean('data$Rating'), median = median('data$Rating'))
head(rating_dd)
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean('data$Rating'), median = median('data$Rating'))
head(aggre_ddp)
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean('Rating'), median = median('Rating'))
head(aggre_ddp)
aggre_ddp <- ddply(data, c('data$Subject'), summarise,
avg = mean(Rating), median = median(Rating))
head(aggre_ddp)
data <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data.txt', header=TRUE)
sum(is.na(data))
data <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data.txt', header=TRUE)
View((age_cat))
View(age_cat)
age_cat
age_cat<-cut(data$Age, seq(0,90,10), labels=c(1:10))
age_cat<-cut(data$Age, seq(0,90,10), labels=c(1:11))
age_cat<-cut(data$Age, seq(0,90,10), labels=c(1:9))
age_cat
data1 <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/data1.txt', header=TRUE)
View(data1)
data1$Age<-cut(data$Age, seq(0,90,10), labels=c(1:9))
data1$Age<-cut(data$Age, seq(0,90,10), labels=c(0:10))
data1$Age<-cut(data$Age, seq(0,90,10), labels=c(0:9))
data1$Age<-cut(data$Age, seq(0,90,10), right=FALSE, labels=c(0:9))
data1$Age<-cut(data$Age, seq(0,90,10), right=FALSE, labels=c(0:10))
data1$Age<-cut(data$Age, seq(0,90,10), right=FALSE, labels=c(0:10))
data1$Age<-cut(data$Age, seq(10,90,10), right=FALSE, labels=c(1:10))
data1$Age<-cut(data$Age, seq(10,90,10), right=FALSE, labels=c(1:9))
data1$Age<-cut(data$Age, seq(10,90,10), labels=c(1:9))
data1$Age<-cut(data$Age, seq(10,90,10), labels=c(1:8))
dat_exp11 <- subset(data1, Condition == "Study1", select = c("Age","Rating"))
dat_exp22 <- subset(data1, Condition == "Study2", select = c("Age","Rating"))
plot(dat_exp11$Age, dat_exp11$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study1")
plot(dat_exp22$Age, dat_exp22$Rating, xlab="Age", ylab="Rating", main = "Ratings by age in Study2")
describe(data)
data
head(data)
table(data$Age)
table(head(data$Age))
summary(data$Rating)
mode_var(data$Rating)
rm(list = ls())
rm(list=ls())
setwd('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment3')
dat <- read.csv('data.txt', header= TRUE)
dat <- read.csv('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment3/data.txt', header= TRUE)
dat <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment3/data.txt', header= TRUE)
dat <- read.table('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment3/data', header= TRUE)
dat <- read.table('data', header= TRUE)
dat <- read.table('data.txt', header= TRUE)
setwd('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment3')
dat <- read.table('data.txt', header= TRUE)
dat <- read.table('data.txt', header= TRUE)
View(dat)
dat <- read.table('data.txt', header= TRUE)
View(dat)
dat$Familiarity <- ifelse(dat$Rating > 4, 1, 0)
View(dat)
install.packages('mgcv')
install.packages('itsadug')
library(plyr)
library(plotfunctions)
library(mgcv)    # for GAMs
library(itsadug) # for visualization of GAMs
dat$cAge <- dat$Age - 40
lm1 <- glm(Familiarity ~ cAge , data=dat, family=binomial)
g1 <- gam(Familiarity ~ cAge, data=dat, family=binomial)
summary(g1)
summary(lm1)
rm(list=ls())
#set working directory
setwd('C:/Users/user/Documents/MSC AI/MSC AI YEAR 2/Adv stats/R programming/s4273281_assignment3')
#load libraries
library(plyr)
library(plotfunctions)
library(mgcv)    # for GAMs
library(itsadug) # for visualization of GAMs
#load data
dat <- read.table('data.txt', header= TRUE)
View(dat)
#change rating to familiarity score
dat$Familiarity <- ifelse(dat$Rating > 4, 1, 0)
#center age variable
dat$cAge <- dat$Age - 40
lm1 <- glm(Familiarity ~ cAge , data=dat, family=binomial)
summary(lm1)
g1 <- gam(Familiarity ~ cAge, data=dat, family=binomial)
summary(g1)
g2 <- gam(Familiarity ~ s(cAge, by = 'Condition') , data=dat, family=binomial)
g2 <- gam(Familiarity ~ s(cAge, by = Condition) , data=dat, family=binomial)
g2 <- gam(Familiarity ~ cAge + s(cAge, by = Condition) , data=dat, family=binomial)
typeof(dat$Condition)
dat$Cond <- as.factor(ifelse(dat$Condition=='Study1', "Study1", "Study2"))
levels(dat$Cond)
g2 <- gam(Familiarity ~ s(cAge, by = Cond) , data=dat, family=binomial)
summary(g2)
range(dat$Familiarity)
fitted(g2)
range(fitted(g2))
emptyPlot(c(-.25,1.25), c(-1,1), h0=0, v0=c(0,1),
ylab="Familiarity (Logit scale)", axes=FALSE)
axis(1, range(dat$cAge))
axis(2, at=c(-1,0,1), las=1)
